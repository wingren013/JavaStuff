package Practice;

import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

import Practice.AnimationDemo.MovingMessagePanel;
import Practice.AnimationDemo.MovingMessagePanel.TimerListener;

public class WalkingMan extends JFrame{
	ImageIcon Q = new ImageIcon("walk1.png");
	Image Walk_test = Q.getImage();
	/**
	 * @param args
	 */
	public WalkingMan() {
		// Create two MovingMessagePanel for displaying two moving messages
		this.setLayout(new GridLayout(2, 1));
		add(new MovingImagePanel(Walk_test));
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		WalkingMan frame = new WalkingMan();
		frame.setTitle("Walking Man");
		frame.setLocationRelativeTo(null); // Center the frame
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(580, 500);
		frame.setVisible(true);
		
	}
	static class MovingImagePanel extends JPanel {
		private Image message;
		private int xCoordinate = 20;
		private int yCoordinate = 20;
		private Timer timer = new Timer(1000, new TimerListener());
		public MovingImagePanel(Image i) {
			this.message = i;
			

			// Start timer for animation
			timer.start();

			// Control animation speed using mouse buttons
			this.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseClicked(MouseEvent e) {
					int delay = timer.getDelay();
					if (e.getButton() == MouseEvent.BUTTON1) 
						timer.setDelay(delay > 10 ? delay - 1000 : 0);
					else if (e.getButton() == MouseEvent.BUTTON3) 
						timer.setDelay(delay < 50000 ? delay + 1000 : 50000);
				}
			});
		}

		 /** Paint the message */
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);

			if (xCoordinate > getWidth()) {
				xCoordinate = - 100; //pixels, this allows graceful entry from left
			}
			xCoordinate += 5;
			g.drawImage(message, xCoordinate, yCoordinate, 150, 250, this);
		}
		 
		class TimerListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			repaint();
		}
		
	}
}
}
	

